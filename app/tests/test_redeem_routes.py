import pytestimport sysimport osfrom datetime import datetimefrom datetime import date# Add the parent directory to the sys.path so that we can import 'api'current_dir = os.path.dirname(os.path.abspath(__file__))parent_dir = os.path.join(current_dir, '..')sys.path.insert(0, parent_dir)from api import app, db from api.models.voucher import VoucherModel  from api.models.redeem import RedeemModel@pytest.fixturedef client():    app.config['TESTING'] = True    # Configure the Flask app    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + 'db.sqlite'     with app.test_client() as client:        with app.app_context():            db.create_all()             yield client            db.drop_all()  def seed_test_data():    # Seed test data into the test database    vouchers = [        {            "code": "V0001",            "discount": 0.0,            "expiration_date": "2024-10-30",            "products": "product_b",            "redemption_limit": 50,            "type": "gift voucher",            "user_restrictions": "user_1,user_2",            "value": 100.0        },        {            "code": "V0002",            "discount": 10.0,            "expiration_date": "2024-10-30",            "products": "",            "redemption_limit": 50,            "type": "discount voucher",            "user_restrictions": "user_1,user_2",            "value": 0.0        },        {            "code": "V0003",            "discount": 0.0,            "expiration_date": "2024-10-30",            "products": "",            "redemption_limit": 1,            "type": "cash voucher",            "user_restrictions": "user_1,user_2",            "value": 40.0        }    ]    vouchers = [{**voucher, "expiration_date": datetime.strptime(voucher["expiration_date"], "%Y-%m-%d")} for voucher in vouchers]    db.session.add_all([VoucherModel(**voucher) for voucher in vouchers])  # Map data to VoucherModel    redeems = [        {            'created_date': date(2023, 10, 30),            'voucher_code': 'V0001',            'user_id': 'user_1',            'transaction_id': 'transaction_1',            'staff_id': 'staff_1',            'products_redeemed': 'product_b',            'amount': 10.0,            'discount': 10.0,            'net_amount': 140.0        },        {            'created_date': date(2023, 11, 30),            'voucher_code': 'V0002',            'user_id': 'user_2',            'transaction_id': 'transaction_2',            'staff_id': 'staff_2',            'products_redeemed': 'product_b, product_c',            'amount': 10.0,            'discount': 5.0,            'net_amount': 75.0        },        {            'created_date': date(2024, 11, 15),            'voucher_code': 'V0003',            'user_id': 'user_3',            'transaction_id': 'transaction_3',            'staff_id': 'staff_3',            'products_redeemed': 'product_c, product_d',            'amount': 10.0,            'discount': 20.0,            'net_amount': 180.0        }    ]    redeems = [        {**redeem, "created_date": datetime.combine(redeem["created_date"], datetime.min.time())} for redeem in redeems    ]    db.session.add_all([RedeemModel(**redeem) for redeem in redeems])  # Map data to RedeemModel    db.session.commit()def test_get_redeems(client):    # Seed test data    seed_test_data()    # Simulate GET request to /redeems    response = client.get('/redeems')    # Assertions    assert response.status_code == 200    assert 'application/json' in response.content_type    assert 'V0001' in str(response.data)      assert 'V0002' in str(response.data)      def test_redeem_voucher(client):        seed_test_data()    # Test with valid data    valid_data = {            "created_date": "2024-01-15",            "voucher_code": "V0001",            "user_id": "user_4",            "transaction_id": "TXN1233",            "staff_id": 101,            "products_redeemed": "product_b",            "amount": 0,            "discount": 10.0,            "net_amount": 40.0    }    response_valid = client.post('/redeem', json=valid_data)    print(response_valid.data)    assert response_valid.status_code == 201    assert 'application/json' in response_valid.content_type    assert 'Voucher redeemed successfully' in str(response_valid.data)    # Add more assertions based on the actual response structure    # Test with invalid data (e.g., missing required field)    invalid_data = {        "created_date": "2024-01-15",        "user_id": 1,        "transaction_id": "TXN123",        "staff_id": 101,        "products_redeemed": ["ProductA", "ProductB"],        "amount": 50.0,        "discount": 10.0,        "net_amount": 40.0    }    response_invalid = client.post('/redeem', json=invalid_data)    assert response_invalid.status_code == 400    assert 'application/json' in response_invalid.content_type    assert 'error' in str(response_invalid.data)def test_redeem_multiple_vouchers(client):        seed_test_data()    # Test with multiple redeems    multiple_redeems_data =  [        {            "created_date": "2024-01-15",            "voucher_code": "V0001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "product_b",            "amount": 5.0,            "discount": 10.0        },        {            "created_date": "2024-01-15",            "voucher_code": "V0001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "product_b",            "amount": 5.0,            "discount": 10.0        }    ]    response_multiple_redeems = client.post('/redeem-multiple', json=multiple_redeems_data)    assert response_multiple_redeems.status_code == 201    assert 'application/json' in response_multiple_redeems.content_type    assert 'Vouchers redeemed successfully' in str(response_multiple_redeems.data)    # Add more assertions based on the actual response structure