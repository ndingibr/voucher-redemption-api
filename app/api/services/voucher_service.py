from api.models.voucher import VoucherModelfrom api.models.redeem import RedeemModelfrom api.models.voucher import voucher_schemafrom api import dbfrom datetime import datetimeclass VoucherService:    def get_all_vouchers():        """        Retrieve all vouchers from the database.        Returns:            list: List of voucher objects.        """        # Query all vouchers from the database        vouchers = VoucherModel.query.all()        # Serialize the vouchers using the voucher_schema        result = voucher_schema.dump(vouchers, many=True)        return result        @staticmethod    def get_voucher_by_code(code):        """        Retrieve a voucher from the database based on its unique code.        Args:            code (str): Unique code associated with the voucher.        Returns:            VoucherModel: The voucher object if found, otherwise None.        """        # Query the voucher from the database based on the code        voucher = VoucherModel.query.filter_by(code=code).first()                # Query RedeemModel to get all redeems with the specified voucher code        redeems = RedeemModel.query.filter_by(voucher_code=code).all()                # Associate redeems with the voucher        if redeems:            voucher.redeems = redeems        return voucher    def create_voucher(code, type, value, discount, expiration_date, redemption_limit, user_restrictions, products):        """        Create a new voucher and store it in the database.            Args:            code (str): Unique code associated with the voucher.            type (str): Type of the voucher (e.g., gift voucher, discount voucher, cash voucher).            value (float): Monetary value of the voucher (required for cash vouchers).            discount (float): Discount percentage (0 for gift vouchers, >0 for discount vouchers, 0 for cash vouchers).            expiration_date (Date): Date when the voucher expires.            redemption_limit (int): Maximum number of times the voucher can be redeemed.            user_restrictions (str): Restrictions on users who can redeem the voucher (comma-separated or empty).            products (str): Products associated with the voucher (comma-separated or empty).            Returns:            dict: Dictionary indicating the result of the operation.                - If successful: {'success': 'Voucher created successfully'}                - If unsuccessful: {'error': 'Reason for failure'}        """        print('here')        try:            # Check if the code is unique            if VoucherModel.query.filter_by(code=code).first():                return {'error': f"Voucher with code {code} already exists."}                        print('here')                        # Validate voucher type and discount/value            if type not in {'gift voucher', 'discount voucher', 'cash voucher'}:                return {'error': f"Unsupported voucher type: {type}"}            if (type == 'gift voucher' and discount != 0) or (type == 'discount voucher' and discount == 0):                return {'error': f"Invalid discount for {type}."}            if type == 'cash voucher' and value is None:                return {'error': "Value is required for 'cash voucher'."}                # Validate user_restrictions and products            if user_restrictions and not all(user_restrictions.split(',')):                return {'error': "User restrictions should be a non-empty list of strings."}                        if products and not all(products.split(',')):                return {'error': "Products should be a non-empty list of strings."}                # Create a new voucher instance            new_voucher = VoucherModel(                code=code,                type=type,                value=value,                discount=discount,                expiration_date=datetime.strptime(expiration_date, '%Y-%m-%d').date(),                redemption_limit=redemption_limit,                user_restrictions=user_restrictions,                products=products            )                # Add the voucher to the database and commit changes            db.session.add(new_voucher)            db.session.commit()                return new_voucher            except Exception as e:            return {'error': str(e)}