from flask import jsonify, requestfrom api.services.redeem_service import RedeemService from api import app@app.route('/redeems', methods=['GET'])def get_redeems():    """    Retrieve all redeems.    Returns:    {        "redeems": [List of redeem data]    }    """    try:        redeems = RedeemService.get_all_redeems()        return jsonify({"redeems": redeems})    except ValueError as e:        return jsonify({"error": str(e)}), 500@app.route('/redeem', methods=['POST'])def redeem_voucher():    """    Redeem a single voucher.    JSON Request Body:    {            "created_date": "2024-01-15",            "voucher_code": "VCH001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "ProductA,ProductB",            "amount": 50.0,            "discount": 10.0    }    Returns:    {        "success": "Voucher redeemed successfully",        "redeem": {            "id": 1,            "created_date": "2024-01-15",            "voucher_code": "VCH001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": ["ProductA", "ProductB"],            "amount": 50.0,            "discount": 10.0,            "net_amount": 40.0        }    }    or    {        "error": "Reason for failure"    }    """    try:        data = request.json  # Get the JSON data from the request body        # Check if required fields are present in the request        required_fields = ["voucher_code", "user_id", "transaction_id", "created_date"]        if not all(field in data for field in required_fields):            return jsonify({'error': 'Missing required fields in the request'}), 400        result = RedeemService.redeem_voucher(            data["voucher_code"],            user_id=data["user_id"],            transaction_id=data["transaction_id"],            created_date=data["created_date"],            products_redeemed=data["products_redeemed"],            amount=data.get("amount", 0.0),            discount=data.get("discount", 0.0),        )        return jsonify(result), 201    except ValueError as e:        return jsonify({"error": str(e)}), 400# Additional route for redeeming multiple vouchers@app.route('/redeem-multiple', methods=['POST'])def redeem_multiple_vouchers():    """    Redeem multiple vouchers.    JSON Request Body:  [        {            "created_date": "2024-01-15",            "voucher_code": "V0001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "product_b",            "amount": 5.0,            "discount": 10.0        },        {            "created_date": "2024-01-15",            "voucher_code": "V0001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "product_b",            "amount": 5.0,            "discount": 10.0        }    ]    Returns:    {    "redeems": [        {            "redeem": {                "amount": 5.0,                "created_date": "2024-01-16",                "discount": 10.0,                "id": 8,                "net_amount": 100.0,                "products_redeemed": "product_b",                "staff_id": null,                "transaction_id": "TXN123",                "user_id": "1",                "voucher_code": "V0001"            },            "success": "Voucher redeemed successfully"        },        {            "redeem": {                "amount": 5.0,                "created_date": "2024-01-16",                "discount": 10.0,                "id": 9,                "net_amount": 100.0,                "products_redeemed": "product_b",                "staff_id": null,                "transaction_id": "TXN123",                "user_id": "1",                "voucher_code": "V0001"            },            "success": "Voucher redeemed successfully"        }    ],    "success": "Vouchers redeemed successfully"}    }    or    {        "error": "Reason for failure"    }    """    try:        data = request.json  # Get the JSON data from the request body        if not isinstance(data, list):            return jsonify({'error': 'Request body should be a list of voucher entries'}), 400        results = []        for voucher_data in data:            # Check if required fields are present in each voucher entry            required_fields = ["voucher_code", "user_id", "transaction_id", "created_date"]            if not all(field in voucher_data for field in required_fields):                return jsonify({'error': 'Missing required fields in one or more voucher entries'}), 400            result = RedeemService.redeem_voucher(                voucher_data["voucher_code"],                user_id=voucher_data["user_id"],                transaction_id=voucher_data["transaction_id"],                created_date=voucher_data["created_date"],                products_redeemed=voucher_data.get("products_redeemed", ""),                amount=voucher_data.get("amount", 0.0),                discount=voucher_data.get("discount", 0.0),            )            results.append(result)        return jsonify({"success": "Vouchers redeemed successfully", "redeems": results}), 201    except ValueError as e:        return jsonify({"error": str(e)}), 400    """    Redeem multiple vouchers at once.    JSON Request Body:    [        {            "created_date": "2024-01-15",            "voucher_code": "VCH001",            "user_id": 1,            "transaction_id": "TXN123",            "staff_id": 101,            "products_redeemed": "ProductA, ProductB",            "amount": 50.0,            "discount": 10.0        },        {            "created_date": "2024-01-15",            "voucher_code": "VCH002",            "user_id": 2,            "transaction_id": "TXN124",            "staff_id": 102,            "products_redeemed": ["ProductC", "ProductD"],            "amount": 60.0,            "discount": 20.0        }        # Add more voucher redemption requests as needed    ]    Returns:    {        "success": "Voucher(s) redeemed successfully",        "results": [            {                "voucher_code": "VCH001",                "success": "Voucher redeemed successfully",                "redeem": {                    "id": 1,                    "created_date": "2024-01-15",                    "voucher_code": "VCH001",                    "user_id": 1,                    "transaction_id": "TXN123",                    "staff_id": 101,                    "products_redeemed": ["ProductA", "ProductB"],                    "amount": 50.0,                    "discount": 10.0,                    "net_amount": 40.0                }            },            {                "voucher_code": "VCH002",                "success": "Voucher redeemed successfully",                "redeem": {                    "id": 2,                    "created_date": "2024-01-15",                    "voucher_code": "VCH002",                    "user_id": 2,                    "transaction_id": "TXN124",                    "staff_id": 102,                    "products_redeemed": ["ProductC", "ProductD"],                    "amount": 60.0,                    "discount": 20.0,                    "net_amount": 40.0                }            }            # Add more results as needed        ]    }    or    {        "error": "Reason for failure"    }    """    try:        # Get the list of JSON data from the request body        data_list = request.json          # Validate each voucher redemption request in the list        for data in data_list:            required_fields = ["voucher_code", "user_id", "transaction_id", "created_date"]            if not all(field in data for field in required_fields):                return jsonify({'error': 'Missing required fields in one or more voucher redemption requests'}), 400        # Call the redeem_voucher method from RedeemService for each request        results = []        for data in data_list:            result = RedeemService.redeem_voucher(                data["voucher_code"],                user_id=data["user_id"],                transaction_id=data["transaction_id"],                created_date=data["created_date"],                products_redeemed=data["products_redeemed"],                amount=data.get("amount", 0.0),                discount=data.get("discount", 0.0),            )            if 'success' in result:                results.append({                    "voucher_code": data["voucher_code"],                    "success": result["success"],                    "redeem": result.get("redeem", {})                })            else:                results.append({"voucher_code": data["voucher_code"], "error": result.get("error", "Unknown error")})        return jsonify({'success': 'Voucher(s) redeemed successfully', 'results': results})    except ValueError as e:        return jsonify({"error": str(e)}), 400